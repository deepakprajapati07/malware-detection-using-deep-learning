from time import sleep
from flask import Flask, render_template, request, jsonify
import os
import shutil
from datetime import datetime
from app.data_processing import convert_files
from app.prediction import make_prediction
from app.binary_model_class import *
from app.malware_model_class import *


app = Flask(__name__)


# Routes
@app.route('/')
def index():
    return render_template('index.html')


@app.route('/upload', methods=['POST'])
def upload_files():
    try:
        if 'files' not in request.files:
            return jsonify({"error": "No file part"}), 400
        
        files = request.files.getlist('files')
        if not files:
            return jsonify({"error": "No selected files"}), 400

        input_dir = 'raw_data'
        if not os.path.exists(input_dir):
            os.makedirs(input_dir)

        file_paths = []
        for uploaded_file in files:
            if uploaded_file.filename == '':
                continue
            
            current_time = datetime.now().strftime("%Y%m%d_%H%M%S")
            file_extension = os.path.splitext(uploaded_file.filename)[-1]
            
            filename = f"{current_time}{file_extension}"
            file_path = input_dir + '/' + filename
            
            # Save the uploaded file
            uploaded_file.save(file_path)
            file_paths.append(file_path)
            
        if not file_paths:
            return jsonify({"error": "No valid files uploaded"}), 400
        
        sleep(1)
        return jsonify({"message": "Files uploaded successfully", "paths": file_paths})

    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/results', methods=['POST'])
def getProcessedData():
    # Extract the paths from form data
    if 'file_paths' not in request.json:
        return jsonify({"error": "Paths not provided"}), 400
    
    file_paths = request.json['file_paths']
    
    if not file_paths:
        return jsonify({"error": "Invalid paths provided"}), 400

    # Pre-processing the data
    imgFormat = 'jpeg'
    mode = 'grayscale'
    imageSize = 128
    processed_image_paths = []
    for input_dir in file_paths:
        input_dir = os.path.basename(input_dir)
        
        status, processed_paths = convert_files(input_file=input_dir, imgFormat=imgFormat, mode=mode, imageSize=imageSize)
        if status != "All files processed successfully.":
            return jsonify({"error": status}), 500
        processed_image_paths.extend(processed_paths)

    if processed_image_paths:
        # Prediction
        model_path = './models/binary_model_resnet.pth'
        data_dir = './processed_data/sample/'
        class_names = ['Goodware', 'Malware']
        prediction = make_prediction(model_path, data_dir, class_names)
        
        if prediction == "Malware":
            malware_model_path = './models/fine_tune_model_resnet101.pth'
            malware_class_names = ['Airpush', 'AndroRAT', 'Aples', 'BankBot', 'Bankun', 'Boqx', 'Boxer', 'Cova', 'Dowgin', 'DroidKungFu', 
                            'Erop', 'FakeAngry', 'FakeAV', 'FakeDoc', 'FakeInst', 'FakePlayer', 'FakeTimer', 'FakeUpdates', 'Finspy', 
                            'Fjcon', 'Fobus', 'Fusob', 'GingerMaster', 'GoldDream', 'Gorpo', 'Gumen', 'Jisut', 'Kemoge', 'Koler', 
                            'Ksapp', 'Kuguo', 'Kyview', 'Leech', 'Lnk', 'Lotoor', 'Mecor', 'Minimob', 'Mmarketpay', 'MobileTX', 
                            'Mseg', 'Mtk', 'Nandrobox', 'Obad', 'Ogel', 'Opfake', 'Penetho', 'Ramnit', 'Roop', 'RuMMS', 'SimpleLocker', 
                            'SlemBunk', 'SmsKey', 'SmsZombie', 'Spambot', 'SpyBubble', 'Stealer', 'Steek', 'Svpeng', 'Tesbo', 'Triada', 
                            'Univert', 'UpdtKiller', 'Utchi', 'Vidro', 'VikingHorde', 'Vmvol', 'Winge', 'Youmi', 'Zitmo', 'Ztorg']
            malware_pred = make_prediction(malware_model_path, data_dir, malware_class_names)
            data = {
                "prediction": prediction,
                "acc": "99.25%",
                "malware_type": malware_pred,
                "type_acc": "63.31%"
            }
            try:
                shutil.rmtree(data_dir)
            except Exception as e:
                print(f'Failed to delete contents of {data_dir}. Reason: {e}')

            return jsonify(data)
        
        data = {
            "prediction": prediction,
            "acc": "99.25%"
        }

        try:
            shutil.rmtree(data_dir)
        except Exception as e:
            print(f'Failed to delete contents of {data_dir}. Reason: {e}')
        return jsonify(data)
    else:
        return jsonify({"error": "No files processed"}), 500

if __name__ == "__main__":
    app.run(debug=True)
