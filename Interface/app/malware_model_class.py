import torch
from torch import nn
import torchvision.models as models

# Model 1 (Pre-Trained)
class FineTuneModel(nn.Module):
    def __init__(self, model_name, num_classes, grayscale=False):
        super(FineTuneModel, self).__init__()
        self.grayscale = grayscale
        
        if grayscale:
            in_channels = 1
        else:
            in_channels = 3
        
        if model_name == 'resnet101':
            self.model = models.resnet101(pretrained=True)
            if self.grayscale:
                self.model.conv1 = nn.Conv2d(in_channels, 64, kernel_size=7, stride=2, padding=3, bias=False)
            self.model.fc = nn.Linear(self.model.fc.in_features, num_classes)
        
        else:
            raise ValueError("Model name not supported. Choose from available pretrained models.")
        
    def forward(self, x):
        return self.model(x)
