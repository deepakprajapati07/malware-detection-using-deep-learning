import torch
from torchvision import transforms
from PIL import Image
import os

def load_model(model_path):
    """
    Load a PyTorch model from the specified path.
    """
    model = torch.load(model_path, map_location=torch.device('cpu'))
    model.eval()
    return model

def make_prediction(model_path, folder_path, class_names):
    """
    Make a prediction on a single image using a pre-trained model.

    Parameters:
    - model: The loaded PyTorch model.
    - image_path: Path to the image file.
    - class_names: List of class names corresponding to the model's output classes.

    Returns:
    - The predicted class for the image.
    """
    
    image_path = folder_path + os.listdir(folder_path)[0]
    model = load_model(model_path)
    transform = transforms.Compose([
        transforms.Grayscale(num_output_channels=1),
        transforms.Resize((128, 128)),
        transforms.ToTensor(),
        transforms.Normalize((0.5,), (0.5,))
    ])
    
    image = Image.open(image_path)
    input_tensor = transform(image).unsqueeze(0)
    
    with torch.no_grad():
        output = model(input_tensor)
        pred = output.argmax(dim=1)
        prediction = class_names[pred.item()]
    
    return prediction