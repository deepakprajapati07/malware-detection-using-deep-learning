import os
import numpy as np
from PIL import Image

# Grayscale Image Creation
def createGrayImage(input_file, imgFormat='jpeg', imageSize=128, resampling_filter='BICUBIC'):
    """Creates a gray-level image from file and saves the image in processed_images folder"""
    try:
        filePath = './raw_data/' + input_file
        with open(filePath, 'rb') as file:
            file_content = file.read()
            data = np.frombuffer(file_content, dtype=np.uint8)
            image_size = int(np.ceil(np.sqrt(len(data))))
            data = np.pad(data, (0, image_size**2 - len(data)), 'constant')
            data = data.reshape((image_size, image_size))
            image = Image.fromarray(data, 'L')
            resized_image = image.resize((imageSize, imageSize), getattr(Image, resampling_filter.upper()))
            processed_images_dir = './processed_data/sample'
            if not os.path.exists(processed_images_dir):
                os.makedirs(processed_images_dir)
            output_file_path = os.path.join(processed_images_dir, os.path.splitext(os.path.basename(input_file))[0] + "." + imgFormat)
            resized_image.save(output_file_path)

            return output_file_path

    except FileNotFoundError:
        print(f"Error: File '{input_file}' not found.")
        return None
    except Exception as e:
        print(f"An error occurred: {e}")
        return None

# Coloured Image Creation
def createColorImage(input_file, imgFormat='jpeg', imageSize=128, resampling_filter='BICUBIC'):
    """Creates a coloured image from file and saves the images in processed_images folder"""
    try:
        filePath = './raw_data/' + input_file
        with open(filePath, 'rb') as file:
            file_content = file.read()
            data = np.frombuffer(file_content, dtype=np.uint8)
            image_size = int(np.ceil(np.sqrt(len(data) / 3)))
            data = np.pad(data, (0, image_size**2 * 3 - len(data)), 'constant')
            data = data.reshape((image_size, image_size, 3))
            image = Image.fromarray(data, 'RGB')
            resized_image = image.resize((imageSize, imageSize), getattr(Image, resampling_filter.upper()))
            processed_images_dir = './processed_data/sample'
            if not os.path.exists(processed_images_dir):
                os.makedirs(processed_images_dir)
            output_file_path = os.path.join(processed_images_dir, os.path.splitext(os.path.basename(input_file))[0] + "." + imgFormat)
            resized_image.save(output_file_path)
            
            return output_file_path

    except FileNotFoundError:
        print(f"Error: File '{input_file}' not found.")
        return None
    except Exception as e:
        print(f"An error occurred: {e}")
        return None

# Convert the files into images
def convert_files(input_file, imgFormat='jpeg', mode='color', imageSize=128, resampling_filter='BICUBIC'):
    """Fetches files from 'input_dir', creates images, saves them to 'processed_images' and returns the status and list of processed images"""
    try:                
        if not input_file:
            return "No files to process.", []

        if mode == 'grayscale':
            resultant_image = createGrayImage(input_file, imgFormat, imageSize, resampling_filter)
        elif mode == 'color':
            resultant_image = createColorImage(input_file, imgFormat, imageSize, resampling_filter)

        if resultant_image is None:
            return f"Error creating image for {input_file}", []

        remove_file_path = "./raw_data/" + input_file
        os.remove(remove_file_path)

        return "All files processed successfully.", resultant_image
            
    except Exception as e:
        print(f"An error occurred: {e}")
        return False, []
